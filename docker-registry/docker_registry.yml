apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: registry
  namespace: nonrtric
  labels:
    app: registry
spec:
  selector:
    matchLabels:
      app: registry
  replicas: 1
  template:
    metadata:
      labels:
        app: registry
    spec:
      containers:
      - name: nginx
        image: nginx:1.19
        ports:
        - name: tcp
          containerPort: 5001
        volumeMounts:
          - name: nginx-config
            readOnly: true
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
      - name: master
        image: registry:2
        ports:
        - name: tcp
          containerPort: 5000
        volumeMounts:
          - name: docker-config
            readOnly: true
            mountPath: /etc/docker/registry/config.yml
            subPath: config.yml
      volumes:
      - name: nginx-config
        configMap:
          name: nginx.conf
      - name: docker-config
        configMap:
          name: config.yml
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: nonrtric
  labels:
    app: registry
spec:
  type: LoadBalancer
  ports:
  - name: tcp
    port: 5001
    targetPort: 5001
  selector:
    app: registry
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx.conf
  namespace: nonrtric
data:
  # example of a complex property defined using --from-file
  nginx.conf: |-
    events {
        worker_connections 1024;
    }

    http {

        upstream docker-registry {
            server localhost:5000;
        }

        ## Set a variable to help us decide if we need to add the
        ## 'Docker-Distribution-Api-Version' header.
        ## The registry always sets this header.
        ## In the case of nginx performing auth, the header is unset
        ## since nginx is auth-ing before proxying.
        map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
            '' 'registry/2.0';
        }

        server {
            listen 5001;
            server_name localhost;

            # SSL
            #ssl_certificate /etc/nginx/conf.d/domain.crt;
            #ssl_certificate_key /etc/nginx/conf.d/domain.key;

            # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
            #ssl_protocols TLSv1.1 TLSv1.2;
            #ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
            #ssl_prefer_server_ciphers on;
            #ssl_session_cache shared:SSL:10m;

            # disable any limits to avoid HTTP 413 for large image uploads
            client_max_body_size 0;

            # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
            chunked_transfer_encoding on;

            location /v2/ {
                # Do not allow connections from docker 1.5 and earlier
                # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
                if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                    return 404;
                }

                # To add basic authentication to v2 use auth_basic setting.
                #auth_basic "Registry realm";
                #auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

                ## If $docker_distribution_api_version is empty, the header is not added.
                ## See the map directive above where this variable is defined.
                add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

                proxy_pass http://docker-registry;
                proxy_set_header Host $http_host; # required for docker client's sake
                proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 900;
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config.yml
  namespace: nonrtric
data:
  # example of a complex property defined using --from-file
  config.yml: |-
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      relativeurls: true
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
